#lang racket/base

;; Static contracts for structural contracts.
;; Ex: list/sc, vectorof/sc

(provide
  (all-defined-out))

(require
  racket/contract
  (only-in racket/async-channel async-channel?)
  (only-in racket/set set? set-mutable? set-weak?)
  (only-in racket/promise promise?))

(define or/sc or/c)
(define and/sc and/c)
(define promise/sc promise?)
(define syntax/sc syntax?)
(define parameter/sc parameter?)
(define channel/sc channel?)
(define continuation-mark-key/sc continuation-mark-key?)
(define evt/sc evt?)
(define async-channel/sc async-channel?)
(define box/sc box?)
(define hash/sc hash?)
(define immutable-hash/c (and/c hash? immutable?))
(define listof/sc (or/c pair? null?))
(define mutable-hash/c (and/c hash? (not/c immutable?)))
(define pair/sc pair?)
(define seq/sc sequence?)
(define set/sc (or/c set? set-mutable? set-weak?))
(define vectorof/sc vector?)
(define weak-hash/c (and/c hash? hash-weak?))

(define (make-vector/sc arg*)
  (let ([N (length arg*)])
    (and/c vector? (lambda (v) (= N (vector-length v))))))

